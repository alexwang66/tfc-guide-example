terraform {
  cloud {
    organization = "alexwang"
    workspaces {
      name = "tfc-guide-example"
    }
  }

  required_providers {
    platform = {
      source  = "jfrog/platform"
      version = "2.2.5"
    }
  }
}

variable "tfc_credential_tag_name" {
  description = "The Terraform Cloud OIDC credential tag name"
  type        = string
  default     = "JFROG"
}

resource "platform_oidc_configuration" "my-generic-oidc-configuration" {
  name          = "alex-tfc"  
  description   = "OIDC config for Terraform Cloud"
  issuer_url    = "https://app.terraform.io"
  provider_type = "generic"
  audience      = var.tfc_credential_tag_name  # ‰∏é provider ÂåπÈÖç
}

provider "platform" {
  url = "https://hkjctest.jfrog.io"
  oidc_provider_name = "alex-tfc"
  tfc_credential_tag_name = "JFROG"
}

variable "jfrog_url" {
  description = "JFrog Artifactory base URL"
  type        = string
}

variable "jfrog_repo_name" {
  description = "Name to assign to the Helm repo"
  type        = string
}

variable "jfrog_helm_repo_url" {
  description = "JFrog Helm repository URL"
  type        = string
}

variable "jfrog_username" {
  description = "JFrog username"
  type        = string
  default     = "alexwang"
}

resource "null_resource" "jfrog_repo_check" {
  provisioner "local-exec" {
    command = <<EOT
echo "üì¶ Fetching repository list from $${JFROG_URL}..." > curl_repo.log

# ÊâìÂç∞ÊâÄÊúâÁõ∏ÂÖ≥ÁéØÂ¢ÉÂèòÈáèÁî®‰∫éË∞ÉËØï
echo "üîç Debug: Checking environment variables..." >> curl_repo.log
echo "JFROG_URL: $${JFROG_URL}" >> curl_repo.log
echo "TFC_WORKLOAD_IDENTITY_TOKEN_JFROG: $${TFC_WORKLOAD_IDENTITY_TOKEN_JFROG}" >> curl_repo.log

# ÊâìÂç∞ token Âà∞Êó•ÂøóÔºà‰ªÖÁî®‰∫éË∞ÉËØïÔºåÁîü‰∫ß‰∏≠ËØ∑Â∞èÂøÉÔºâ
echo "üîë TFC_WORKLOAD_IDENTITY_TOKEN_JFROG="
echo "$${TFC_WORKLOAD_IDENTITY_TOKEN_JFROG}"

# Â∞Ü token ‰øùÂ≠òÂà∞ÂçïÁã¨ÁöÑÊñá‰ª∂‰∏≠
echo "$${TFC_WORKLOAD_IDENTITY_TOKEN_JFROG}" > token.txt

# ÊòæÁ§∫ token ÁöÑÂâç20‰∏™Â≠óÁ¨¶ÔºàÁî®‰∫éÈ™åËØÅÔºâ
TOKEN_PREVIEW="$${TFC_WORKLOAD_IDENTITY_TOKEN_JFROG}"
if [ -n "$${TOKEN_PREVIEW}" ]; then
  echo "Token preview (first 20 chars): $${TOKEN_PREVIEW}" | cut -c1-20
else
  echo "Token preview: (empty)"
fi

# Ê£ÄÊü• token ÊòØÂê¶‰∏∫Á©∫Ôºå‰ΩÜ‰∏çÈÄÄÂá∫ÔºåËÄåÊòØÁªßÁª≠ÊâßË°å
if [ -z "$${TFC_WORKLOAD_IDENTITY_TOKEN_JFROG}" ]; then
  echo "‚ö†Ô∏è  WARNING: TFC_WORKLOAD_IDENTITY_TOKEN_JFROG is empty!" >> curl_repo.log
  echo "This might be expected if running locally without Terraform Cloud OIDC setup" >> curl_repo.log
  echo "Continuing without authentication..." >> curl_repo.log
  
  # Â∞ùËØï‰∏çÂ∏¶ËÆ§ËØÅÁöÑËØ∑Ê±Ç
  curl -s "$${JFROG_URL}/artifactory/api/repositories" >> curl_repo.log 2>&1
else
  echo "‚úÖ Token is present and not empty" >> curl_repo.log
  
  # ÊâßË°åÂ∏¶ËÆ§ËØÅÁöÑ curl ËØ∑Ê±Ç
  curl -s -H "Authorization: Bearer $${TFC_WORKLOAD_IDENTITY_TOKEN_JFROG}" \
    "$${JFROG_URL}/artifactory/api/repositories" >> curl_repo.log 2>&1
fi

echo "‚úÖ Finished fetching repositories." >> curl_repo.log
EOT
  }

  triggers = {
    always_run = timestamp()
  }
}


# Ê∑ªÂä†ËæìÂá∫ÂùóÊù•ÊòæÁ§∫ token ‰ø°ÊÅØ
output "token_info" {
  description = "Information about the TFC workload identity token"
  value = {
    token_present = var.tfc_credential_tag_name != null
    token_preview = "Check token.txt file for full token"
    log_file = "curl_repo.log"
  }
}


